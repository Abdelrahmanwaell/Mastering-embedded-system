
toggle_led.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000348  00000000  00000000  000001f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000003f2  00000000  00000000  00000540  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 72 00 	call	0xe4	; 0xe4 <main>
  64:	0c 94 cf 00 	jmp	0x19e	; 0x19e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <GPIO_init>:

#define CLR_BIT(REG,PIN)			(REG &=~(1<<PIN))
#define SET_BIT(REG,PIN)			(REG |=(1<<PIN))

void GPIO_init ()
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	DDRD |= (1<<5 | 1<<6 | 1<<7 | 1<<4);
  74:	a1 e3       	ldi	r26, 0x31	; 49
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	e1 e3       	ldi	r30, 0x31	; 49
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	80 81       	ld	r24, Z
  7e:	80 6f       	ori	r24, 0xF0	; 240
  80:	8c 93       	st	X, r24

}
  82:	cf 91       	pop	r28
  84:	df 91       	pop	r29
  86:	08 95       	ret

00000088 <my_delay>:

void my_delay(uint32 t)
{
  88:	df 93       	push	r29
  8a:	cf 93       	push	r28
  8c:	00 d0       	rcall	.+0      	; 0x8e <my_delay+0x6>
  8e:	00 d0       	rcall	.+0      	; 0x90 <my_delay+0x8>
  90:	00 d0       	rcall	.+0      	; 0x92 <my_delay+0xa>
  92:	cd b7       	in	r28, 0x3d	; 61
  94:	de b7       	in	r29, 0x3e	; 62
  96:	9e 83       	std	Y+6, r25	; 0x06
  98:	8d 83       	std	Y+5, r24	; 0x05
	int i,j ;
	for(i=0;i<t;i++)
  9a:	1c 82       	std	Y+4, r1	; 0x04
  9c:	1b 82       	std	Y+3, r1	; 0x03
  9e:	12 c0       	rjmp	.+36     	; 0xc4 <my_delay+0x3c>
		for(j=0;i<255;i++);
  a0:	1a 82       	std	Y+2, r1	; 0x02
  a2:	19 82       	std	Y+1, r1	; 0x01
  a4:	05 c0       	rjmp	.+10     	; 0xb0 <my_delay+0x28>
  a6:	8b 81       	ldd	r24, Y+3	; 0x03
  a8:	9c 81       	ldd	r25, Y+4	; 0x04
  aa:	01 96       	adiw	r24, 0x01	; 1
  ac:	9c 83       	std	Y+4, r25	; 0x04
  ae:	8b 83       	std	Y+3, r24	; 0x03
  b0:	8b 81       	ldd	r24, Y+3	; 0x03
  b2:	9c 81       	ldd	r25, Y+4	; 0x04
  b4:	8f 3f       	cpi	r24, 0xFF	; 255
  b6:	91 05       	cpc	r25, r1
  b8:	b4 f3       	brlt	.-20     	; 0xa6 <my_delay+0x1e>
}

void my_delay(uint32 t)
{
	int i,j ;
	for(i=0;i<t;i++)
  ba:	8b 81       	ldd	r24, Y+3	; 0x03
  bc:	9c 81       	ldd	r25, Y+4	; 0x04
  be:	01 96       	adiw	r24, 0x01	; 1
  c0:	9c 83       	std	Y+4, r25	; 0x04
  c2:	8b 83       	std	Y+3, r24	; 0x03
  c4:	2b 81       	ldd	r18, Y+3	; 0x03
  c6:	3c 81       	ldd	r19, Y+4	; 0x04
  c8:	8d 81       	ldd	r24, Y+5	; 0x05
  ca:	9e 81       	ldd	r25, Y+6	; 0x06
  cc:	28 17       	cp	r18, r24
  ce:	39 07       	cpc	r19, r25
  d0:	38 f3       	brcs	.-50     	; 0xa0 <my_delay+0x18>
		for(j=0;i<255;i++);
}
  d2:	26 96       	adiw	r28, 0x06	; 6
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	f8 94       	cli
  d8:	de bf       	out	0x3e, r29	; 62
  da:	0f be       	out	0x3f, r0	; 63
  dc:	cd bf       	out	0x3d, r28	; 61
  de:	cf 91       	pop	r28
  e0:	df 91       	pop	r29
  e2:	08 95       	ret

000000e4 <main>:

int main (void)
{
  e4:	df 93       	push	r29
  e6:	cf 93       	push	r28
  e8:	cd b7       	in	r28, 0x3d	; 61
  ea:	de b7       	in	r29, 0x3e	; 62
	GPIO_init();
  ec:	0e 94 36 00 	call	0x6c	; 0x6c <GPIO_init>


	while (1)
	{
		SET_BIT(PORTD,5);
  f0:	a2 e3       	ldi	r26, 0x32	; 50
  f2:	b0 e0       	ldi	r27, 0x00	; 0
  f4:	e2 e3       	ldi	r30, 0x32	; 50
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	80 62       	ori	r24, 0x20	; 32
  fc:	8c 93       	st	X, r24
		CLR_BIT(PORTD,6);
  fe:	a2 e3       	ldi	r26, 0x32	; 50
 100:	b0 e0       	ldi	r27, 0x00	; 0
 102:	e2 e3       	ldi	r30, 0x32	; 50
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	8f 7b       	andi	r24, 0xBF	; 191
 10a:	8c 93       	st	X, r24
		CLR_BIT(PORTD,7);
 10c:	a2 e3       	ldi	r26, 0x32	; 50
 10e:	b0 e0       	ldi	r27, 0x00	; 0
 110:	e2 e3       	ldi	r30, 0x32	; 50
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	8f 77       	andi	r24, 0x7F	; 127
 118:	8c 93       	st	X, r24
		CLR_BIT(PORTD,4);
 11a:	a2 e3       	ldi	r26, 0x32	; 50
 11c:	b0 e0       	ldi	r27, 0x00	; 0
 11e:	e2 e3       	ldi	r30, 0x32	; 50
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	8f 7e       	andi	r24, 0xEF	; 239
 126:	8c 93       	st	X, r24
		my_delay(10000);
 128:	80 e1       	ldi	r24, 0x10	; 16
 12a:	97 e2       	ldi	r25, 0x27	; 39
 12c:	0e 94 44 00 	call	0x88	; 0x88 <my_delay>

		CLR_BIT(PORTD,5);
 130:	a2 e3       	ldi	r26, 0x32	; 50
 132:	b0 e0       	ldi	r27, 0x00	; 0
 134:	e2 e3       	ldi	r30, 0x32	; 50
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	8f 7d       	andi	r24, 0xDF	; 223
 13c:	8c 93       	st	X, r24
		SET_BIT(PORTD,6);
 13e:	a2 e3       	ldi	r26, 0x32	; 50
 140:	b0 e0       	ldi	r27, 0x00	; 0
 142:	e2 e3       	ldi	r30, 0x32	; 50
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	80 64       	ori	r24, 0x40	; 64
 14a:	8c 93       	st	X, r24
		my_delay(10000);
 14c:	80 e1       	ldi	r24, 0x10	; 16
 14e:	97 e2       	ldi	r25, 0x27	; 39
 150:	0e 94 44 00 	call	0x88	; 0x88 <my_delay>



		CLR_BIT(PORTD,6);
 154:	a2 e3       	ldi	r26, 0x32	; 50
 156:	b0 e0       	ldi	r27, 0x00	; 0
 158:	e2 e3       	ldi	r30, 0x32	; 50
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	8f 7b       	andi	r24, 0xBF	; 191
 160:	8c 93       	st	X, r24
		SET_BIT(PORTD,7);
 162:	a2 e3       	ldi	r26, 0x32	; 50
 164:	b0 e0       	ldi	r27, 0x00	; 0
 166:	e2 e3       	ldi	r30, 0x32	; 50
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	80 68       	ori	r24, 0x80	; 128
 16e:	8c 93       	st	X, r24
		my_delay(10000);
 170:	80 e1       	ldi	r24, 0x10	; 16
 172:	97 e2       	ldi	r25, 0x27	; 39
 174:	0e 94 44 00 	call	0x88	; 0x88 <my_delay>


		CLR_BIT(PORTD,7);
 178:	a2 e3       	ldi	r26, 0x32	; 50
 17a:	b0 e0       	ldi	r27, 0x00	; 0
 17c:	e2 e3       	ldi	r30, 0x32	; 50
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	80 81       	ld	r24, Z
 182:	8f 77       	andi	r24, 0x7F	; 127
 184:	8c 93       	st	X, r24
		SET_BIT(PORTD,4);
 186:	a2 e3       	ldi	r26, 0x32	; 50
 188:	b0 e0       	ldi	r27, 0x00	; 0
 18a:	e2 e3       	ldi	r30, 0x32	; 50
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	80 81       	ld	r24, Z
 190:	80 61       	ori	r24, 0x10	; 16
 192:	8c 93       	st	X, r24
		my_delay(10000);
 194:	80 e1       	ldi	r24, 0x10	; 16
 196:	97 e2       	ldi	r25, 0x27	; 39
 198:	0e 94 44 00 	call	0x88	; 0x88 <my_delay>
 19c:	a9 cf       	rjmp	.-174    	; 0xf0 <main+0xc>

0000019e <_exit>:
 19e:	f8 94       	cli

000001a0 <__stop_program>:
 1a0:	ff cf       	rjmp	.-2      	; 0x1a0 <__stop_program>
