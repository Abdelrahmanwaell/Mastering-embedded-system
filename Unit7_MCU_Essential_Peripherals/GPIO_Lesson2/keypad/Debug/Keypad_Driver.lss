
Keypad_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000087e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000f54  00000000  00000000  000008d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000ac7  00000000  00000000  00001828  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 19 04 	call	0x832	; 0x832 <main>
  64:	0c 94 3d 04 	jmp	0x87a	; 0x87a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <MCAL_GPIO_setupPinDirection>:
* @param [in] 		- direction : set Pin direction
* @retval 			- None
* Note				- If the input port number or pin number are not correct, The function will not handle the request.
*/
void MCAL_GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	00 d0       	rcall	.+0      	; 0x72 <MCAL_GPIO_setupPinDirection+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <MCAL_GPIO_setupPinDirection+0x8>
  74:	0f 92       	push	r0
  76:	cd b7       	in	r28, 0x3d	; 61
  78:	de b7       	in	r29, 0x3e	; 62
  7a:	89 83       	std	Y+1, r24	; 0x01
  7c:	6a 83       	std	Y+2, r22	; 0x02
  7e:	4b 83       	std	Y+3, r20	; 0x03

		switch (port_num)
  80:	89 81       	ldd	r24, Y+1	; 0x01
  82:	28 2f       	mov	r18, r24
  84:	30 e0       	ldi	r19, 0x00	; 0
  86:	3d 83       	std	Y+5, r19	; 0x05
  88:	2c 83       	std	Y+4, r18	; 0x04
  8a:	8c 81       	ldd	r24, Y+4	; 0x04
  8c:	9d 81       	ldd	r25, Y+5	; 0x05
  8e:	81 30       	cpi	r24, 0x01	; 1
  90:	91 05       	cpc	r25, r1
  92:	69 f1       	breq	.+90     	; 0xee <MCAL_GPIO_setupPinDirection+0x82>
  94:	2c 81       	ldd	r18, Y+4	; 0x04
  96:	3d 81       	ldd	r19, Y+5	; 0x05
  98:	22 30       	cpi	r18, 0x02	; 2
  9a:	31 05       	cpc	r19, r1
  9c:	2c f4       	brge	.+10     	; 0xa8 <MCAL_GPIO_setupPinDirection+0x3c>
  9e:	8c 81       	ldd	r24, Y+4	; 0x04
  a0:	9d 81       	ldd	r25, Y+5	; 0x05
  a2:	00 97       	sbiw	r24, 0x00	; 0
  a4:	69 f0       	breq	.+26     	; 0xc0 <MCAL_GPIO_setupPinDirection+0x54>
  a6:	67 c0       	rjmp	.+206    	; 0x176 <MCAL_GPIO_setupPinDirection+0x10a>
  a8:	2c 81       	ldd	r18, Y+4	; 0x04
  aa:	3d 81       	ldd	r19, Y+5	; 0x05
  ac:	22 30       	cpi	r18, 0x02	; 2
  ae:	31 05       	cpc	r19, r1
  b0:	a9 f1       	breq	.+106    	; 0x11c <MCAL_GPIO_setupPinDirection+0xb0>
  b2:	8c 81       	ldd	r24, Y+4	; 0x04
  b4:	9d 81       	ldd	r25, Y+5	; 0x05
  b6:	83 30       	cpi	r24, 0x03	; 3
  b8:	91 05       	cpc	r25, r1
  ba:	09 f4       	brne	.+2      	; 0xbe <MCAL_GPIO_setupPinDirection+0x52>
  bc:	46 c0       	rjmp	.+140    	; 0x14a <MCAL_GPIO_setupPinDirection+0xde>
  be:	5b c0       	rjmp	.+182    	; 0x176 <MCAL_GPIO_setupPinDirection+0x10a>
		{
		case PORTA_ID :
			if(direction==PIN_OUTPUT)
  c0:	8b 81       	ldd	r24, Y+3	; 0x03
  c2:	81 30       	cpi	r24, 0x01	; 1
  c4:	49 f4       	brne	.+18     	; 0xd8 <MCAL_GPIO_setupPinDirection+0x6c>
			{
				//SET_BIT
				DDRA|=pin_num;
  c6:	aa e3       	ldi	r26, 0x3A	; 58
  c8:	b0 e0       	ldi	r27, 0x00	; 0
  ca:	ea e3       	ldi	r30, 0x3A	; 58
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	90 81       	ld	r25, Z
  d0:	8a 81       	ldd	r24, Y+2	; 0x02
  d2:	89 2b       	or	r24, r25
  d4:	8c 93       	st	X, r24
  d6:	4f c0       	rjmp	.+158    	; 0x176 <MCAL_GPIO_setupPinDirection+0x10a>
			}
			else
			{ 	//CLEAR_BIT
				DDRA&=(~pin_num);
  d8:	aa e3       	ldi	r26, 0x3A	; 58
  da:	b0 e0       	ldi	r27, 0x00	; 0
  dc:	ea e3       	ldi	r30, 0x3A	; 58
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	98 2f       	mov	r25, r24
  e4:	8a 81       	ldd	r24, Y+2	; 0x02
  e6:	80 95       	com	r24
  e8:	89 23       	and	r24, r25
  ea:	8c 93       	st	X, r24
  ec:	44 c0       	rjmp	.+136    	; 0x176 <MCAL_GPIO_setupPinDirection+0x10a>
			}
		break;

		case PORTB_ID :
			if(direction==PIN_OUTPUT)
  ee:	8b 81       	ldd	r24, Y+3	; 0x03
  f0:	81 30       	cpi	r24, 0x01	; 1
  f2:	49 f4       	brne	.+18     	; 0x106 <MCAL_GPIO_setupPinDirection+0x9a>
			{
				//SET_BIT
				DDRB|=pin_num;
  f4:	a7 e3       	ldi	r26, 0x37	; 55
  f6:	b0 e0       	ldi	r27, 0x00	; 0
  f8:	e7 e3       	ldi	r30, 0x37	; 55
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	90 81       	ld	r25, Z
  fe:	8a 81       	ldd	r24, Y+2	; 0x02
 100:	89 2b       	or	r24, r25
 102:	8c 93       	st	X, r24
 104:	38 c0       	rjmp	.+112    	; 0x176 <MCAL_GPIO_setupPinDirection+0x10a>
			}
			else
			{ 	//CLEAR_BIT
				DDRB&=(~pin_num);
 106:	a7 e3       	ldi	r26, 0x37	; 55
 108:	b0 e0       	ldi	r27, 0x00	; 0
 10a:	e7 e3       	ldi	r30, 0x37	; 55
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	98 2f       	mov	r25, r24
 112:	8a 81       	ldd	r24, Y+2	; 0x02
 114:	80 95       	com	r24
 116:	89 23       	and	r24, r25
 118:	8c 93       	st	X, r24
 11a:	2d c0       	rjmp	.+90     	; 0x176 <MCAL_GPIO_setupPinDirection+0x10a>
			}
		break;

		case PORTC_ID :
			if(direction==PIN_OUTPUT)
 11c:	8b 81       	ldd	r24, Y+3	; 0x03
 11e:	81 30       	cpi	r24, 0x01	; 1
 120:	49 f4       	brne	.+18     	; 0x134 <MCAL_GPIO_setupPinDirection+0xc8>
			{
				//SET_BIT
				DDRC|=pin_num;
 122:	a4 e3       	ldi	r26, 0x34	; 52
 124:	b0 e0       	ldi	r27, 0x00	; 0
 126:	e4 e3       	ldi	r30, 0x34	; 52
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	90 81       	ld	r25, Z
 12c:	8a 81       	ldd	r24, Y+2	; 0x02
 12e:	89 2b       	or	r24, r25
 130:	8c 93       	st	X, r24
 132:	21 c0       	rjmp	.+66     	; 0x176 <MCAL_GPIO_setupPinDirection+0x10a>
			}
			else
			{ 	//CLEAR_BIT
				DDRC&=(~pin_num);
 134:	a4 e3       	ldi	r26, 0x34	; 52
 136:	b0 e0       	ldi	r27, 0x00	; 0
 138:	e4 e3       	ldi	r30, 0x34	; 52
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	98 2f       	mov	r25, r24
 140:	8a 81       	ldd	r24, Y+2	; 0x02
 142:	80 95       	com	r24
 144:	89 23       	and	r24, r25
 146:	8c 93       	st	X, r24
 148:	16 c0       	rjmp	.+44     	; 0x176 <MCAL_GPIO_setupPinDirection+0x10a>
			}
		break;

		case PORTD_ID :
			if(direction==PIN_OUTPUT)
 14a:	8b 81       	ldd	r24, Y+3	; 0x03
 14c:	81 30       	cpi	r24, 0x01	; 1
 14e:	49 f4       	brne	.+18     	; 0x162 <MCAL_GPIO_setupPinDirection+0xf6>
			{
				//SET_BIT
				DDRD|=pin_num;
 150:	a1 e3       	ldi	r26, 0x31	; 49
 152:	b0 e0       	ldi	r27, 0x00	; 0
 154:	e1 e3       	ldi	r30, 0x31	; 49
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	90 81       	ld	r25, Z
 15a:	8a 81       	ldd	r24, Y+2	; 0x02
 15c:	89 2b       	or	r24, r25
 15e:	8c 93       	st	X, r24
 160:	0a c0       	rjmp	.+20     	; 0x176 <MCAL_GPIO_setupPinDirection+0x10a>
			}
			else
			{ 	//CLEAR_BIT
				DDRD&=(~pin_num);
 162:	a1 e3       	ldi	r26, 0x31	; 49
 164:	b0 e0       	ldi	r27, 0x00	; 0
 166:	e1 e3       	ldi	r30, 0x31	; 49
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	98 2f       	mov	r25, r24
 16e:	8a 81       	ldd	r24, Y+2	; 0x02
 170:	80 95       	com	r24
 172:	89 23       	and	r24, r25
 174:	8c 93       	st	X, r24
		break;

		}


}
 176:	0f 90       	pop	r0
 178:	0f 90       	pop	r0
 17a:	0f 90       	pop	r0
 17c:	0f 90       	pop	r0
 17e:	0f 90       	pop	r0
 180:	cf 91       	pop	r28
 182:	df 91       	pop	r29
 184:	08 95       	ret

00000186 <MCAL_GPIO_writePin>:
* @retval 			- None
* Note				- If the input port number or pin number are not correct, The function will not handle the request.
* 					  If the pin is input, this function will enable/disable the internal pull-up resistor.
*/
void MCAL_GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
 186:	df 93       	push	r29
 188:	cf 93       	push	r28
 18a:	00 d0       	rcall	.+0      	; 0x18c <MCAL_GPIO_writePin+0x6>
 18c:	00 d0       	rcall	.+0      	; 0x18e <MCAL_GPIO_writePin+0x8>
 18e:	0f 92       	push	r0
 190:	cd b7       	in	r28, 0x3d	; 61
 192:	de b7       	in	r29, 0x3e	; 62
 194:	89 83       	std	Y+1, r24	; 0x01
 196:	6a 83       	std	Y+2, r22	; 0x02
 198:	4b 83       	std	Y+3, r20	; 0x03

			switch (port_num)
 19a:	89 81       	ldd	r24, Y+1	; 0x01
 19c:	28 2f       	mov	r18, r24
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	3d 83       	std	Y+5, r19	; 0x05
 1a2:	2c 83       	std	Y+4, r18	; 0x04
 1a4:	8c 81       	ldd	r24, Y+4	; 0x04
 1a6:	9d 81       	ldd	r25, Y+5	; 0x05
 1a8:	81 30       	cpi	r24, 0x01	; 1
 1aa:	91 05       	cpc	r25, r1
 1ac:	69 f1       	breq	.+90     	; 0x208 <MCAL_GPIO_writePin+0x82>
 1ae:	2c 81       	ldd	r18, Y+4	; 0x04
 1b0:	3d 81       	ldd	r19, Y+5	; 0x05
 1b2:	22 30       	cpi	r18, 0x02	; 2
 1b4:	31 05       	cpc	r19, r1
 1b6:	2c f4       	brge	.+10     	; 0x1c2 <MCAL_GPIO_writePin+0x3c>
 1b8:	8c 81       	ldd	r24, Y+4	; 0x04
 1ba:	9d 81       	ldd	r25, Y+5	; 0x05
 1bc:	00 97       	sbiw	r24, 0x00	; 0
 1be:	69 f0       	breq	.+26     	; 0x1da <MCAL_GPIO_writePin+0x54>
 1c0:	67 c0       	rjmp	.+206    	; 0x290 <MCAL_GPIO_writePin+0x10a>
 1c2:	2c 81       	ldd	r18, Y+4	; 0x04
 1c4:	3d 81       	ldd	r19, Y+5	; 0x05
 1c6:	22 30       	cpi	r18, 0x02	; 2
 1c8:	31 05       	cpc	r19, r1
 1ca:	a9 f1       	breq	.+106    	; 0x236 <MCAL_GPIO_writePin+0xb0>
 1cc:	8c 81       	ldd	r24, Y+4	; 0x04
 1ce:	9d 81       	ldd	r25, Y+5	; 0x05
 1d0:	83 30       	cpi	r24, 0x03	; 3
 1d2:	91 05       	cpc	r25, r1
 1d4:	09 f4       	brne	.+2      	; 0x1d8 <MCAL_GPIO_writePin+0x52>
 1d6:	46 c0       	rjmp	.+140    	; 0x264 <MCAL_GPIO_writePin+0xde>
 1d8:	5b c0       	rjmp	.+182    	; 0x290 <MCAL_GPIO_writePin+0x10a>
			{
			case PORTA_ID :
				if(value==GPIO_PIN_SET)
 1da:	8b 81       	ldd	r24, Y+3	; 0x03
 1dc:	81 30       	cpi	r24, 0x01	; 1
 1de:	49 f4       	brne	.+18     	; 0x1f2 <MCAL_GPIO_writePin+0x6c>
				{
					//SET_BIT
					PORTA|=pin_num;
 1e0:	ab e3       	ldi	r26, 0x3B	; 59
 1e2:	b0 e0       	ldi	r27, 0x00	; 0
 1e4:	eb e3       	ldi	r30, 0x3B	; 59
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	90 81       	ld	r25, Z
 1ea:	8a 81       	ldd	r24, Y+2	; 0x02
 1ec:	89 2b       	or	r24, r25
 1ee:	8c 93       	st	X, r24
 1f0:	4f c0       	rjmp	.+158    	; 0x290 <MCAL_GPIO_writePin+0x10a>
				}
				else
				{ 	//CLEAR_BIT
					PORTA&=~pin_num;
 1f2:	ab e3       	ldi	r26, 0x3B	; 59
 1f4:	b0 e0       	ldi	r27, 0x00	; 0
 1f6:	eb e3       	ldi	r30, 0x3B	; 59
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	80 81       	ld	r24, Z
 1fc:	98 2f       	mov	r25, r24
 1fe:	8a 81       	ldd	r24, Y+2	; 0x02
 200:	80 95       	com	r24
 202:	89 23       	and	r24, r25
 204:	8c 93       	st	X, r24
 206:	44 c0       	rjmp	.+136    	; 0x290 <MCAL_GPIO_writePin+0x10a>
				}
			break;

			case PORTB_ID :
				if(value==GPIO_PIN_SET)
 208:	8b 81       	ldd	r24, Y+3	; 0x03
 20a:	81 30       	cpi	r24, 0x01	; 1
 20c:	49 f4       	brne	.+18     	; 0x220 <MCAL_GPIO_writePin+0x9a>
				{
					//SET_BIT
					PORTB|=pin_num;
 20e:	a8 e3       	ldi	r26, 0x38	; 56
 210:	b0 e0       	ldi	r27, 0x00	; 0
 212:	e8 e3       	ldi	r30, 0x38	; 56
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	90 81       	ld	r25, Z
 218:	8a 81       	ldd	r24, Y+2	; 0x02
 21a:	89 2b       	or	r24, r25
 21c:	8c 93       	st	X, r24
 21e:	38 c0       	rjmp	.+112    	; 0x290 <MCAL_GPIO_writePin+0x10a>
				}
				else
				{ 	//CLEAR_BIT
					PORTB&=~pin_num;
 220:	a8 e3       	ldi	r26, 0x38	; 56
 222:	b0 e0       	ldi	r27, 0x00	; 0
 224:	e8 e3       	ldi	r30, 0x38	; 56
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	80 81       	ld	r24, Z
 22a:	98 2f       	mov	r25, r24
 22c:	8a 81       	ldd	r24, Y+2	; 0x02
 22e:	80 95       	com	r24
 230:	89 23       	and	r24, r25
 232:	8c 93       	st	X, r24
 234:	2d c0       	rjmp	.+90     	; 0x290 <MCAL_GPIO_writePin+0x10a>
				}
			break;

			case PORTC_ID :
				if(value==GPIO_PIN_SET)
 236:	8b 81       	ldd	r24, Y+3	; 0x03
 238:	81 30       	cpi	r24, 0x01	; 1
 23a:	49 f4       	brne	.+18     	; 0x24e <MCAL_GPIO_writePin+0xc8>
				{
					//SET_BIT
					PORTC|=pin_num;
 23c:	a5 e3       	ldi	r26, 0x35	; 53
 23e:	b0 e0       	ldi	r27, 0x00	; 0
 240:	e5 e3       	ldi	r30, 0x35	; 53
 242:	f0 e0       	ldi	r31, 0x00	; 0
 244:	90 81       	ld	r25, Z
 246:	8a 81       	ldd	r24, Y+2	; 0x02
 248:	89 2b       	or	r24, r25
 24a:	8c 93       	st	X, r24
 24c:	21 c0       	rjmp	.+66     	; 0x290 <MCAL_GPIO_writePin+0x10a>
				}
				else
				{ 	//CLEAR_BIT
					PORTC&=~pin_num;
 24e:	a5 e3       	ldi	r26, 0x35	; 53
 250:	b0 e0       	ldi	r27, 0x00	; 0
 252:	e5 e3       	ldi	r30, 0x35	; 53
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	80 81       	ld	r24, Z
 258:	98 2f       	mov	r25, r24
 25a:	8a 81       	ldd	r24, Y+2	; 0x02
 25c:	80 95       	com	r24
 25e:	89 23       	and	r24, r25
 260:	8c 93       	st	X, r24
 262:	16 c0       	rjmp	.+44     	; 0x290 <MCAL_GPIO_writePin+0x10a>
				}
			break;

			case PORTD_ID :
				if(value==GPIO_PIN_SET)
 264:	8b 81       	ldd	r24, Y+3	; 0x03
 266:	81 30       	cpi	r24, 0x01	; 1
 268:	49 f4       	brne	.+18     	; 0x27c <MCAL_GPIO_writePin+0xf6>
				{
					//SET_BIT
					PORTD|=pin_num;
 26a:	a2 e3       	ldi	r26, 0x32	; 50
 26c:	b0 e0       	ldi	r27, 0x00	; 0
 26e:	e2 e3       	ldi	r30, 0x32	; 50
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	90 81       	ld	r25, Z
 274:	8a 81       	ldd	r24, Y+2	; 0x02
 276:	89 2b       	or	r24, r25
 278:	8c 93       	st	X, r24
 27a:	0a c0       	rjmp	.+20     	; 0x290 <MCAL_GPIO_writePin+0x10a>
				}
				else
				{ 	//CLEAR_BIT
					PORTD&=~pin_num;
 27c:	a2 e3       	ldi	r26, 0x32	; 50
 27e:	b0 e0       	ldi	r27, 0x00	; 0
 280:	e2 e3       	ldi	r30, 0x32	; 50
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	80 81       	ld	r24, Z
 286:	98 2f       	mov	r25, r24
 288:	8a 81       	ldd	r24, Y+2	; 0x02
 28a:	80 95       	com	r24
 28c:	89 23       	and	r24, r25
 28e:	8c 93       	st	X, r24
				}
			break;

			}

	}
 290:	0f 90       	pop	r0
 292:	0f 90       	pop	r0
 294:	0f 90       	pop	r0
 296:	0f 90       	pop	r0
 298:	0f 90       	pop	r0
 29a:	cf 91       	pop	r28
 29c:	df 91       	pop	r29
 29e:	08 95       	ret

000002a0 <MCAL_GPIO_readPin>:
* @param [in] 		- PinNumber :set Pin Number according @ref GPIO_PINS_define
* @retval 			-  return the value for the required pin, it should be @ref GPIO_PINS_State
* Note				- If the input port number or pin number are not correct, The function will return Logic Low
*/
uint8 MCAL_GPIO_readPin(uint8 port_num, uint8 pin_num)
{
 2a0:	df 93       	push	r29
 2a2:	cf 93       	push	r28
 2a4:	00 d0       	rcall	.+0      	; 0x2a6 <MCAL_GPIO_readPin+0x6>
 2a6:	00 d0       	rcall	.+0      	; 0x2a8 <MCAL_GPIO_readPin+0x8>
 2a8:	0f 92       	push	r0
 2aa:	cd b7       	in	r28, 0x3d	; 61
 2ac:	de b7       	in	r29, 0x3e	; 62
 2ae:	8a 83       	std	Y+2, r24	; 0x02
 2b0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 PinValue=0;
 2b2:	19 82       	std	Y+1, r1	; 0x01

			switch (port_num)
 2b4:	8a 81       	ldd	r24, Y+2	; 0x02
 2b6:	28 2f       	mov	r18, r24
 2b8:	30 e0       	ldi	r19, 0x00	; 0
 2ba:	3d 83       	std	Y+5, r19	; 0x05
 2bc:	2c 83       	std	Y+4, r18	; 0x04
 2be:	8c 81       	ldd	r24, Y+4	; 0x04
 2c0:	9d 81       	ldd	r25, Y+5	; 0x05
 2c2:	81 30       	cpi	r24, 0x01	; 1
 2c4:	91 05       	cpc	r25, r1
 2c6:	09 f1       	breq	.+66     	; 0x30a <MCAL_GPIO_readPin+0x6a>
 2c8:	2c 81       	ldd	r18, Y+4	; 0x04
 2ca:	3d 81       	ldd	r19, Y+5	; 0x05
 2cc:	22 30       	cpi	r18, 0x02	; 2
 2ce:	31 05       	cpc	r19, r1
 2d0:	2c f4       	brge	.+10     	; 0x2dc <MCAL_GPIO_readPin+0x3c>
 2d2:	8c 81       	ldd	r24, Y+4	; 0x04
 2d4:	9d 81       	ldd	r25, Y+5	; 0x05
 2d6:	00 97       	sbiw	r24, 0x00	; 0
 2d8:	61 f0       	breq	.+24     	; 0x2f2 <MCAL_GPIO_readPin+0x52>
 2da:	3a c0       	rjmp	.+116    	; 0x350 <MCAL_GPIO_readPin+0xb0>
 2dc:	2c 81       	ldd	r18, Y+4	; 0x04
 2de:	3d 81       	ldd	r19, Y+5	; 0x05
 2e0:	22 30       	cpi	r18, 0x02	; 2
 2e2:	31 05       	cpc	r19, r1
 2e4:	f1 f0       	breq	.+60     	; 0x322 <MCAL_GPIO_readPin+0x82>
 2e6:	8c 81       	ldd	r24, Y+4	; 0x04
 2e8:	9d 81       	ldd	r25, Y+5	; 0x05
 2ea:	83 30       	cpi	r24, 0x03	; 3
 2ec:	91 05       	cpc	r25, r1
 2ee:	29 f1       	breq	.+74     	; 0x33a <MCAL_GPIO_readPin+0x9a>
 2f0:	2f c0       	rjmp	.+94     	; 0x350 <MCAL_GPIO_readPin+0xb0>
			{
			case PORTA_ID :
				if(PINA&pin_num)
 2f2:	e9 e3       	ldi	r30, 0x39	; 57
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	90 81       	ld	r25, Z
 2f8:	8b 81       	ldd	r24, Y+3	; 0x03
 2fa:	89 23       	and	r24, r25
 2fc:	88 23       	and	r24, r24
 2fe:	19 f0       	breq	.+6      	; 0x306 <MCAL_GPIO_readPin+0x66>
				{

					PinValue=GPIO_PIN_SET;
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	89 83       	std	Y+1, r24	; 0x01
 304:	25 c0       	rjmp	.+74     	; 0x350 <MCAL_GPIO_readPin+0xb0>
				}
				else
				{
					PinValue=GPIO_PIN_RESET;
 306:	19 82       	std	Y+1, r1	; 0x01
 308:	23 c0       	rjmp	.+70     	; 0x350 <MCAL_GPIO_readPin+0xb0>
				}
			break;

			case PORTB_ID :
				if(PINB&pin_num)
 30a:	e6 e3       	ldi	r30, 0x36	; 54
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	90 81       	ld	r25, Z
 310:	8b 81       	ldd	r24, Y+3	; 0x03
 312:	89 23       	and	r24, r25
 314:	88 23       	and	r24, r24
 316:	19 f0       	breq	.+6      	; 0x31e <MCAL_GPIO_readPin+0x7e>
				{

					PinValue=GPIO_PIN_SET;
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	89 83       	std	Y+1, r24	; 0x01
 31c:	19 c0       	rjmp	.+50     	; 0x350 <MCAL_GPIO_readPin+0xb0>
				}
				else
				{
					PinValue=GPIO_PIN_RESET;
 31e:	19 82       	std	Y+1, r1	; 0x01
 320:	17 c0       	rjmp	.+46     	; 0x350 <MCAL_GPIO_readPin+0xb0>
				}
			break;

			case PORTC_ID :
				if(PINC&pin_num)
 322:	e3 e3       	ldi	r30, 0x33	; 51
 324:	f0 e0       	ldi	r31, 0x00	; 0
 326:	90 81       	ld	r25, Z
 328:	8b 81       	ldd	r24, Y+3	; 0x03
 32a:	89 23       	and	r24, r25
 32c:	88 23       	and	r24, r24
 32e:	19 f0       	breq	.+6      	; 0x336 <MCAL_GPIO_readPin+0x96>
				{

					PinValue=GPIO_PIN_SET;
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	89 83       	std	Y+1, r24	; 0x01
 334:	0d c0       	rjmp	.+26     	; 0x350 <MCAL_GPIO_readPin+0xb0>
				}
				else
				{
					PinValue=GPIO_PIN_RESET;
 336:	19 82       	std	Y+1, r1	; 0x01
 338:	0b c0       	rjmp	.+22     	; 0x350 <MCAL_GPIO_readPin+0xb0>
				}
			break;

			case PORTD_ID :
				if(PIND&pin_num)
 33a:	e0 e3       	ldi	r30, 0x30	; 48
 33c:	f0 e0       	ldi	r31, 0x00	; 0
 33e:	90 81       	ld	r25, Z
 340:	8b 81       	ldd	r24, Y+3	; 0x03
 342:	89 23       	and	r24, r25
 344:	88 23       	and	r24, r24
 346:	19 f0       	breq	.+6      	; 0x34e <MCAL_GPIO_readPin+0xae>
				{

					PinValue=GPIO_PIN_SET;
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	89 83       	std	Y+1, r24	; 0x01
 34c:	01 c0       	rjmp	.+2      	; 0x350 <MCAL_GPIO_readPin+0xb0>
				}
				else
				{
					PinValue=GPIO_PIN_RESET;
 34e:	19 82       	std	Y+1, r1	; 0x01
				}
			break;

			}

	return PinValue;
 350:	89 81       	ldd	r24, Y+1	; 0x01

}
 352:	0f 90       	pop	r0
 354:	0f 90       	pop	r0
 356:	0f 90       	pop	r0
 358:	0f 90       	pop	r0
 35a:	0f 90       	pop	r0
 35c:	cf 91       	pop	r28
 35e:	df 91       	pop	r29
 360:	08 95       	ret

00000362 <MCAL_GPIO_setupPortDirection>:
* @param [in] 		- direction : set Pin direction
* @retval 			- None
* Note				- If the input port number, The function will not handle the request.
*/
void MCAL_GPIO_setupPortDirection(uint8 port_num, uint8 direction)
{
 362:	df 93       	push	r29
 364:	cf 93       	push	r28
 366:	00 d0       	rcall	.+0      	; 0x368 <MCAL_GPIO_setupPortDirection+0x6>
 368:	00 d0       	rcall	.+0      	; 0x36a <MCAL_GPIO_setupPortDirection+0x8>
 36a:	cd b7       	in	r28, 0x3d	; 61
 36c:	de b7       	in	r29, 0x3e	; 62
 36e:	89 83       	std	Y+1, r24	; 0x01
 370:	6a 83       	std	Y+2, r22	; 0x02


		switch (port_num)
 372:	89 81       	ldd	r24, Y+1	; 0x01
 374:	28 2f       	mov	r18, r24
 376:	30 e0       	ldi	r19, 0x00	; 0
 378:	3c 83       	std	Y+4, r19	; 0x04
 37a:	2b 83       	std	Y+3, r18	; 0x03
 37c:	8b 81       	ldd	r24, Y+3	; 0x03
 37e:	9c 81       	ldd	r25, Y+4	; 0x04
 380:	81 30       	cpi	r24, 0x01	; 1
 382:	91 05       	cpc	r25, r1
 384:	d1 f0       	breq	.+52     	; 0x3ba <MCAL_GPIO_setupPortDirection+0x58>
 386:	2b 81       	ldd	r18, Y+3	; 0x03
 388:	3c 81       	ldd	r19, Y+4	; 0x04
 38a:	22 30       	cpi	r18, 0x02	; 2
 38c:	31 05       	cpc	r19, r1
 38e:	2c f4       	brge	.+10     	; 0x39a <MCAL_GPIO_setupPortDirection+0x38>
 390:	8b 81       	ldd	r24, Y+3	; 0x03
 392:	9c 81       	ldd	r25, Y+4	; 0x04
 394:	00 97       	sbiw	r24, 0x00	; 0
 396:	61 f0       	breq	.+24     	; 0x3b0 <MCAL_GPIO_setupPortDirection+0x4e>
 398:	1e c0       	rjmp	.+60     	; 0x3d6 <MCAL_GPIO_setupPortDirection+0x74>
 39a:	2b 81       	ldd	r18, Y+3	; 0x03
 39c:	3c 81       	ldd	r19, Y+4	; 0x04
 39e:	22 30       	cpi	r18, 0x02	; 2
 3a0:	31 05       	cpc	r19, r1
 3a2:	81 f0       	breq	.+32     	; 0x3c4 <MCAL_GPIO_setupPortDirection+0x62>
 3a4:	8b 81       	ldd	r24, Y+3	; 0x03
 3a6:	9c 81       	ldd	r25, Y+4	; 0x04
 3a8:	83 30       	cpi	r24, 0x03	; 3
 3aa:	91 05       	cpc	r25, r1
 3ac:	81 f0       	breq	.+32     	; 0x3ce <MCAL_GPIO_setupPortDirection+0x6c>
 3ae:	13 c0       	rjmp	.+38     	; 0x3d6 <MCAL_GPIO_setupPortDirection+0x74>
		{
		case PORTA_ID :

				DDRA=direction;
 3b0:	ea e3       	ldi	r30, 0x3A	; 58
 3b2:	f0 e0       	ldi	r31, 0x00	; 0
 3b4:	8a 81       	ldd	r24, Y+2	; 0x02
 3b6:	80 83       	st	Z, r24
 3b8:	0e c0       	rjmp	.+28     	; 0x3d6 <MCAL_GPIO_setupPortDirection+0x74>

		break;

		case PORTB_ID :

				DDRB=direction;
 3ba:	e7 e3       	ldi	r30, 0x37	; 55
 3bc:	f0 e0       	ldi	r31, 0x00	; 0
 3be:	8a 81       	ldd	r24, Y+2	; 0x02
 3c0:	80 83       	st	Z, r24
 3c2:	09 c0       	rjmp	.+18     	; 0x3d6 <MCAL_GPIO_setupPortDirection+0x74>
		break;

		case PORTC_ID :


				DDRC=direction;
 3c4:	e4 e3       	ldi	r30, 0x34	; 52
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	8a 81       	ldd	r24, Y+2	; 0x02
 3ca:	80 83       	st	Z, r24
 3cc:	04 c0       	rjmp	.+8      	; 0x3d6 <MCAL_GPIO_setupPortDirection+0x74>

		break;

		case PORTD_ID :

				DDRD=direction;
 3ce:	e1 e3       	ldi	r30, 0x31	; 49
 3d0:	f0 e0       	ldi	r31, 0x00	; 0
 3d2:	8a 81       	ldd	r24, Y+2	; 0x02
 3d4:	80 83       	st	Z, r24

		break;

		}

}
 3d6:	0f 90       	pop	r0
 3d8:	0f 90       	pop	r0
 3da:	0f 90       	pop	r0
 3dc:	0f 90       	pop	r0
 3de:	cf 91       	pop	r28
 3e0:	df 91       	pop	r29
 3e2:	08 95       	ret

000003e4 <MCAL_GPIO_writePort>:
* Note				- If any pin in the port is output pin the value will be written.
*					  If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
* 					  If the input port number is not correct, The function will not handle the request.
*/
void MCAL_GPIO_writePort(uint8 port_num, uint8 value)
{
 3e4:	df 93       	push	r29
 3e6:	cf 93       	push	r28
 3e8:	00 d0       	rcall	.+0      	; 0x3ea <MCAL_GPIO_writePort+0x6>
 3ea:	00 d0       	rcall	.+0      	; 0x3ec <MCAL_GPIO_writePort+0x8>
 3ec:	cd b7       	in	r28, 0x3d	; 61
 3ee:	de b7       	in	r29, 0x3e	; 62
 3f0:	89 83       	std	Y+1, r24	; 0x01
 3f2:	6a 83       	std	Y+2, r22	; 0x02

				switch (port_num)
 3f4:	89 81       	ldd	r24, Y+1	; 0x01
 3f6:	28 2f       	mov	r18, r24
 3f8:	30 e0       	ldi	r19, 0x00	; 0
 3fa:	3c 83       	std	Y+4, r19	; 0x04
 3fc:	2b 83       	std	Y+3, r18	; 0x03
 3fe:	8b 81       	ldd	r24, Y+3	; 0x03
 400:	9c 81       	ldd	r25, Y+4	; 0x04
 402:	81 30       	cpi	r24, 0x01	; 1
 404:	91 05       	cpc	r25, r1
 406:	d1 f0       	breq	.+52     	; 0x43c <MCAL_GPIO_writePort+0x58>
 408:	2b 81       	ldd	r18, Y+3	; 0x03
 40a:	3c 81       	ldd	r19, Y+4	; 0x04
 40c:	22 30       	cpi	r18, 0x02	; 2
 40e:	31 05       	cpc	r19, r1
 410:	2c f4       	brge	.+10     	; 0x41c <MCAL_GPIO_writePort+0x38>
 412:	8b 81       	ldd	r24, Y+3	; 0x03
 414:	9c 81       	ldd	r25, Y+4	; 0x04
 416:	00 97       	sbiw	r24, 0x00	; 0
 418:	61 f0       	breq	.+24     	; 0x432 <MCAL_GPIO_writePort+0x4e>
 41a:	1e c0       	rjmp	.+60     	; 0x458 <MCAL_GPIO_writePort+0x74>
 41c:	2b 81       	ldd	r18, Y+3	; 0x03
 41e:	3c 81       	ldd	r19, Y+4	; 0x04
 420:	22 30       	cpi	r18, 0x02	; 2
 422:	31 05       	cpc	r19, r1
 424:	81 f0       	breq	.+32     	; 0x446 <MCAL_GPIO_writePort+0x62>
 426:	8b 81       	ldd	r24, Y+3	; 0x03
 428:	9c 81       	ldd	r25, Y+4	; 0x04
 42a:	83 30       	cpi	r24, 0x03	; 3
 42c:	91 05       	cpc	r25, r1
 42e:	81 f0       	breq	.+32     	; 0x450 <MCAL_GPIO_writePort+0x6c>
 430:	13 c0       	rjmp	.+38     	; 0x458 <MCAL_GPIO_writePort+0x74>
				{
				case PORTA_ID :
					PORTA=value;
 432:	eb e3       	ldi	r30, 0x3B	; 59
 434:	f0 e0       	ldi	r31, 0x00	; 0
 436:	8a 81       	ldd	r24, Y+2	; 0x02
 438:	80 83       	st	Z, r24
 43a:	0e c0       	rjmp	.+28     	; 0x458 <MCAL_GPIO_writePort+0x74>
				break;

				case PORTB_ID :
					PORTB=value;
 43c:	e8 e3       	ldi	r30, 0x38	; 56
 43e:	f0 e0       	ldi	r31, 0x00	; 0
 440:	8a 81       	ldd	r24, Y+2	; 0x02
 442:	80 83       	st	Z, r24
 444:	09 c0       	rjmp	.+18     	; 0x458 <MCAL_GPIO_writePort+0x74>
				break;

				case PORTC_ID :
					PORTC=value;
 446:	e5 e3       	ldi	r30, 0x35	; 53
 448:	f0 e0       	ldi	r31, 0x00	; 0
 44a:	8a 81       	ldd	r24, Y+2	; 0x02
 44c:	80 83       	st	Z, r24
 44e:	04 c0       	rjmp	.+8      	; 0x458 <MCAL_GPIO_writePort+0x74>
				break;

				case PORTD_ID :
					PORTD=value;
 450:	e2 e3       	ldi	r30, 0x32	; 50
 452:	f0 e0       	ldi	r31, 0x00	; 0
 454:	8a 81       	ldd	r24, Y+2	; 0x02
 456:	80 83       	st	Z, r24
				break;

				}
}
 458:	0f 90       	pop	r0
 45a:	0f 90       	pop	r0
 45c:	0f 90       	pop	r0
 45e:	0f 90       	pop	r0
 460:	cf 91       	pop	r28
 462:	df 91       	pop	r29
 464:	08 95       	ret

00000466 <MCAL_GPIO_readPort>:
* @param [in] 		- port_num : set port number @ref GPIO_PORT_define
* @retval 			-  return the value for the required port, it should be @ref GPIO_PINS_State
* Note				- If the input port number or pin number are not correct, The function will return Logic Low
*/
uint8 MCAL_GPIO_readPort(uint8 port_num)
{
 466:	df 93       	push	r29
 468:	cf 93       	push	r28
 46a:	00 d0       	rcall	.+0      	; 0x46c <MCAL_GPIO_readPort+0x6>
 46c:	00 d0       	rcall	.+0      	; 0x46e <MCAL_GPIO_readPort+0x8>
 46e:	cd b7       	in	r28, 0x3d	; 61
 470:	de b7       	in	r29, 0x3e	; 62
 472:	8a 83       	std	Y+2, r24	; 0x02
	uint8 PortValue=0;
 474:	19 82       	std	Y+1, r1	; 0x01

				switch (port_num)
 476:	8a 81       	ldd	r24, Y+2	; 0x02
 478:	28 2f       	mov	r18, r24
 47a:	30 e0       	ldi	r19, 0x00	; 0
 47c:	3c 83       	std	Y+4, r19	; 0x04
 47e:	2b 83       	std	Y+3, r18	; 0x03
 480:	8b 81       	ldd	r24, Y+3	; 0x03
 482:	9c 81       	ldd	r25, Y+4	; 0x04
 484:	81 30       	cpi	r24, 0x01	; 1
 486:	91 05       	cpc	r25, r1
 488:	d1 f0       	breq	.+52     	; 0x4be <MCAL_GPIO_readPort+0x58>
 48a:	2b 81       	ldd	r18, Y+3	; 0x03
 48c:	3c 81       	ldd	r19, Y+4	; 0x04
 48e:	22 30       	cpi	r18, 0x02	; 2
 490:	31 05       	cpc	r19, r1
 492:	2c f4       	brge	.+10     	; 0x49e <MCAL_GPIO_readPort+0x38>
 494:	8b 81       	ldd	r24, Y+3	; 0x03
 496:	9c 81       	ldd	r25, Y+4	; 0x04
 498:	00 97       	sbiw	r24, 0x00	; 0
 49a:	61 f0       	breq	.+24     	; 0x4b4 <MCAL_GPIO_readPort+0x4e>
 49c:	1e c0       	rjmp	.+60     	; 0x4da <MCAL_GPIO_readPort+0x74>
 49e:	2b 81       	ldd	r18, Y+3	; 0x03
 4a0:	3c 81       	ldd	r19, Y+4	; 0x04
 4a2:	22 30       	cpi	r18, 0x02	; 2
 4a4:	31 05       	cpc	r19, r1
 4a6:	81 f0       	breq	.+32     	; 0x4c8 <MCAL_GPIO_readPort+0x62>
 4a8:	8b 81       	ldd	r24, Y+3	; 0x03
 4aa:	9c 81       	ldd	r25, Y+4	; 0x04
 4ac:	83 30       	cpi	r24, 0x03	; 3
 4ae:	91 05       	cpc	r25, r1
 4b0:	81 f0       	breq	.+32     	; 0x4d2 <MCAL_GPIO_readPort+0x6c>
 4b2:	13 c0       	rjmp	.+38     	; 0x4da <MCAL_GPIO_readPort+0x74>
				{
				case PORTA_ID :
					PortValue=PINA;
 4b4:	e9 e3       	ldi	r30, 0x39	; 57
 4b6:	f0 e0       	ldi	r31, 0x00	; 0
 4b8:	80 81       	ld	r24, Z
 4ba:	89 83       	std	Y+1, r24	; 0x01
 4bc:	0e c0       	rjmp	.+28     	; 0x4da <MCAL_GPIO_readPort+0x74>

				break;

				case PORTB_ID :
					PortValue=PINB;
 4be:	e6 e3       	ldi	r30, 0x36	; 54
 4c0:	f0 e0       	ldi	r31, 0x00	; 0
 4c2:	80 81       	ld	r24, Z
 4c4:	89 83       	std	Y+1, r24	; 0x01
 4c6:	09 c0       	rjmp	.+18     	; 0x4da <MCAL_GPIO_readPort+0x74>
				break;

				case PORTC_ID :
					PortValue=PINC;
 4c8:	e3 e3       	ldi	r30, 0x33	; 51
 4ca:	f0 e0       	ldi	r31, 0x00	; 0
 4cc:	80 81       	ld	r24, Z
 4ce:	89 83       	std	Y+1, r24	; 0x01
 4d0:	04 c0       	rjmp	.+8      	; 0x4da <MCAL_GPIO_readPort+0x74>
				break;

				case PORTD_ID :
					PortValue=PIND;
 4d2:	e0 e3       	ldi	r30, 0x30	; 48
 4d4:	f0 e0       	ldi	r31, 0x00	; 0
 4d6:	80 81       	ld	r24, Z
 4d8:	89 83       	std	Y+1, r24	; 0x01
				break;

				}

		return PortValue;
 4da:	89 81       	ldd	r24, Y+1	; 0x01
}
 4dc:	0f 90       	pop	r0
 4de:	0f 90       	pop	r0
 4e0:	0f 90       	pop	r0
 4e2:	0f 90       	pop	r0
 4e4:	cf 91       	pop	r28
 4e6:	df 91       	pop	r29
 4e8:	08 95       	ret

000004ea <MCAL_GPIO_togglePin>:
* @param [in] 		- port_num : set port number @ref GPIO_PORT_define
* @retval 			- None
* Note				- If the input port number is not correct, The function will not handle the request.
*/
void MCAL_GPIO_togglePin(uint8 port_num, uint8 pin_num)
{
 4ea:	df 93       	push	r29
 4ec:	cf 93       	push	r28
 4ee:	00 d0       	rcall	.+0      	; 0x4f0 <MCAL_GPIO_togglePin+0x6>
 4f0:	00 d0       	rcall	.+0      	; 0x4f2 <MCAL_GPIO_togglePin+0x8>
 4f2:	cd b7       	in	r28, 0x3d	; 61
 4f4:	de b7       	in	r29, 0x3e	; 62
 4f6:	89 83       	std	Y+1, r24	; 0x01
 4f8:	6a 83       	std	Y+2, r22	; 0x02


					switch (port_num)
 4fa:	89 81       	ldd	r24, Y+1	; 0x01
 4fc:	28 2f       	mov	r18, r24
 4fe:	30 e0       	ldi	r19, 0x00	; 0
 500:	3c 83       	std	Y+4, r19	; 0x04
 502:	2b 83       	std	Y+3, r18	; 0x03
 504:	8b 81       	ldd	r24, Y+3	; 0x03
 506:	9c 81       	ldd	r25, Y+4	; 0x04
 508:	81 30       	cpi	r24, 0x01	; 1
 50a:	91 05       	cpc	r25, r1
 50c:	f1 f0       	breq	.+60     	; 0x54a <MCAL_GPIO_togglePin+0x60>
 50e:	2b 81       	ldd	r18, Y+3	; 0x03
 510:	3c 81       	ldd	r19, Y+4	; 0x04
 512:	22 30       	cpi	r18, 0x02	; 2
 514:	31 05       	cpc	r19, r1
 516:	2c f4       	brge	.+10     	; 0x522 <MCAL_GPIO_togglePin+0x38>
 518:	8b 81       	ldd	r24, Y+3	; 0x03
 51a:	9c 81       	ldd	r25, Y+4	; 0x04
 51c:	00 97       	sbiw	r24, 0x00	; 0
 51e:	61 f0       	breq	.+24     	; 0x538 <MCAL_GPIO_togglePin+0x4e>
 520:	2e c0       	rjmp	.+92     	; 0x57e <MCAL_GPIO_togglePin+0x94>
 522:	2b 81       	ldd	r18, Y+3	; 0x03
 524:	3c 81       	ldd	r19, Y+4	; 0x04
 526:	22 30       	cpi	r18, 0x02	; 2
 528:	31 05       	cpc	r19, r1
 52a:	c1 f0       	breq	.+48     	; 0x55c <MCAL_GPIO_togglePin+0x72>
 52c:	8b 81       	ldd	r24, Y+3	; 0x03
 52e:	9c 81       	ldd	r25, Y+4	; 0x04
 530:	83 30       	cpi	r24, 0x03	; 3
 532:	91 05       	cpc	r25, r1
 534:	e1 f0       	breq	.+56     	; 0x56e <MCAL_GPIO_togglePin+0x84>
 536:	23 c0       	rjmp	.+70     	; 0x57e <MCAL_GPIO_togglePin+0x94>
					{
					case PORTA_ID :
						PORTA^=pin_num;
 538:	ab e3       	ldi	r26, 0x3B	; 59
 53a:	b0 e0       	ldi	r27, 0x00	; 0
 53c:	eb e3       	ldi	r30, 0x3B	; 59
 53e:	f0 e0       	ldi	r31, 0x00	; 0
 540:	90 81       	ld	r25, Z
 542:	8a 81       	ldd	r24, Y+2	; 0x02
 544:	89 27       	eor	r24, r25
 546:	8c 93       	st	X, r24
 548:	1a c0       	rjmp	.+52     	; 0x57e <MCAL_GPIO_togglePin+0x94>
					break;

					case PORTB_ID :
						PORTB^=pin_num;
 54a:	a8 e3       	ldi	r26, 0x38	; 56
 54c:	b0 e0       	ldi	r27, 0x00	; 0
 54e:	e8 e3       	ldi	r30, 0x38	; 56
 550:	f0 e0       	ldi	r31, 0x00	; 0
 552:	90 81       	ld	r25, Z
 554:	8a 81       	ldd	r24, Y+2	; 0x02
 556:	89 27       	eor	r24, r25
 558:	8c 93       	st	X, r24
 55a:	11 c0       	rjmp	.+34     	; 0x57e <MCAL_GPIO_togglePin+0x94>
					break;

					case PORTC_ID :
						PORTC^=pin_num;
 55c:	a5 e3       	ldi	r26, 0x35	; 53
 55e:	b0 e0       	ldi	r27, 0x00	; 0
 560:	e5 e3       	ldi	r30, 0x35	; 53
 562:	f0 e0       	ldi	r31, 0x00	; 0
 564:	90 81       	ld	r25, Z
 566:	8a 81       	ldd	r24, Y+2	; 0x02
 568:	89 27       	eor	r24, r25
 56a:	8c 93       	st	X, r24
 56c:	08 c0       	rjmp	.+16     	; 0x57e <MCAL_GPIO_togglePin+0x94>
					break;

					case PORTD_ID :
						PORTD^=pin_num;
 56e:	a2 e3       	ldi	r26, 0x32	; 50
 570:	b0 e0       	ldi	r27, 0x00	; 0
 572:	e2 e3       	ldi	r30, 0x32	; 50
 574:	f0 e0       	ldi	r31, 0x00	; 0
 576:	90 81       	ld	r25, Z
 578:	8a 81       	ldd	r24, Y+2	; 0x02
 57a:	89 27       	eor	r24, r25
 57c:	8c 93       	st	X, r24
					break;

					}


}
 57e:	0f 90       	pop	r0
 580:	0f 90       	pop	r0
 582:	0f 90       	pop	r0
 584:	0f 90       	pop	r0
 586:	cf 91       	pop	r28
 588:	df 91       	pop	r29
 58a:	08 95       	ret

0000058c <MCAL_GPIO_togglePort>:
* @param [in] 		- PinNumber :set Pin Number according @ref GPIO_PINS_define
* @retval 			- None
* Note				- If the input port number is not correct, The function will not handle the request.
*/
void MCAL_GPIO_togglePort(uint8 port_num)
{
 58c:	df 93       	push	r29
 58e:	cf 93       	push	r28
 590:	00 d0       	rcall	.+0      	; 0x592 <MCAL_GPIO_togglePort+0x6>
 592:	0f 92       	push	r0
 594:	cd b7       	in	r28, 0x3d	; 61
 596:	de b7       	in	r29, 0x3e	; 62
 598:	89 83       	std	Y+1, r24	; 0x01


					switch (port_num)
 59a:	89 81       	ldd	r24, Y+1	; 0x01
 59c:	28 2f       	mov	r18, r24
 59e:	30 e0       	ldi	r19, 0x00	; 0
 5a0:	3b 83       	std	Y+3, r19	; 0x03
 5a2:	2a 83       	std	Y+2, r18	; 0x02
 5a4:	8a 81       	ldd	r24, Y+2	; 0x02
 5a6:	9b 81       	ldd	r25, Y+3	; 0x03
 5a8:	81 30       	cpi	r24, 0x01	; 1
 5aa:	91 05       	cpc	r25, r1
 5ac:	e9 f0       	breq	.+58     	; 0x5e8 <MCAL_GPIO_togglePort+0x5c>
 5ae:	2a 81       	ldd	r18, Y+2	; 0x02
 5b0:	3b 81       	ldd	r19, Y+3	; 0x03
 5b2:	22 30       	cpi	r18, 0x02	; 2
 5b4:	31 05       	cpc	r19, r1
 5b6:	2c f4       	brge	.+10     	; 0x5c2 <MCAL_GPIO_togglePort+0x36>
 5b8:	8a 81       	ldd	r24, Y+2	; 0x02
 5ba:	9b 81       	ldd	r25, Y+3	; 0x03
 5bc:	00 97       	sbiw	r24, 0x00	; 0
 5be:	61 f0       	breq	.+24     	; 0x5d8 <MCAL_GPIO_togglePort+0x4c>
 5c0:	2a c0       	rjmp	.+84     	; 0x616 <MCAL_GPIO_togglePort+0x8a>
 5c2:	2a 81       	ldd	r18, Y+2	; 0x02
 5c4:	3b 81       	ldd	r19, Y+3	; 0x03
 5c6:	22 30       	cpi	r18, 0x02	; 2
 5c8:	31 05       	cpc	r19, r1
 5ca:	b1 f0       	breq	.+44     	; 0x5f8 <MCAL_GPIO_togglePort+0x6c>
 5cc:	8a 81       	ldd	r24, Y+2	; 0x02
 5ce:	9b 81       	ldd	r25, Y+3	; 0x03
 5d0:	83 30       	cpi	r24, 0x03	; 3
 5d2:	91 05       	cpc	r25, r1
 5d4:	c9 f0       	breq	.+50     	; 0x608 <MCAL_GPIO_togglePort+0x7c>
 5d6:	1f c0       	rjmp	.+62     	; 0x616 <MCAL_GPIO_togglePort+0x8a>
					{
					case PORTA_ID :
						PORTA^=0xFF;
 5d8:	ab e3       	ldi	r26, 0x3B	; 59
 5da:	b0 e0       	ldi	r27, 0x00	; 0
 5dc:	eb e3       	ldi	r30, 0x3B	; 59
 5de:	f0 e0       	ldi	r31, 0x00	; 0
 5e0:	80 81       	ld	r24, Z
 5e2:	80 95       	com	r24
 5e4:	8c 93       	st	X, r24
 5e6:	17 c0       	rjmp	.+46     	; 0x616 <MCAL_GPIO_togglePort+0x8a>
					break;

					case PORTB_ID :
						PORTB^=0xFF;
 5e8:	a8 e3       	ldi	r26, 0x38	; 56
 5ea:	b0 e0       	ldi	r27, 0x00	; 0
 5ec:	e8 e3       	ldi	r30, 0x38	; 56
 5ee:	f0 e0       	ldi	r31, 0x00	; 0
 5f0:	80 81       	ld	r24, Z
 5f2:	80 95       	com	r24
 5f4:	8c 93       	st	X, r24
 5f6:	0f c0       	rjmp	.+30     	; 0x616 <MCAL_GPIO_togglePort+0x8a>
					break;

					case PORTC_ID :
						PORTC^=0xFF;
 5f8:	a5 e3       	ldi	r26, 0x35	; 53
 5fa:	b0 e0       	ldi	r27, 0x00	; 0
 5fc:	e5 e3       	ldi	r30, 0x35	; 53
 5fe:	f0 e0       	ldi	r31, 0x00	; 0
 600:	80 81       	ld	r24, Z
 602:	80 95       	com	r24
 604:	8c 93       	st	X, r24
 606:	07 c0       	rjmp	.+14     	; 0x616 <MCAL_GPIO_togglePort+0x8a>
					break;

					case PORTD_ID :
						PORTD^=0xFF;
 608:	a2 e3       	ldi	r26, 0x32	; 50
 60a:	b0 e0       	ldi	r27, 0x00	; 0
 60c:	e2 e3       	ldi	r30, 0x32	; 50
 60e:	f0 e0       	ldi	r31, 0x00	; 0
 610:	80 81       	ld	r24, Z
 612:	80 95       	com	r24
 614:	8c 93       	st	X, r24
					break;

					}


}
 616:	0f 90       	pop	r0
 618:	0f 90       	pop	r0
 61a:	0f 90       	pop	r0
 61c:	cf 91       	pop	r28
 61e:	df 91       	pop	r29
 620:	08 95       	ret

00000622 <KEYPAD_Pressed_Key>:
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number);
#endif


uint8 KEYPAD_Pressed_Key(void)
{ uint8 col,row;
 622:	df 93       	push	r29
 624:	cf 93       	push	r28
 626:	00 d0       	rcall	.+0      	; 0x628 <KEYPAD_Pressed_Key+0x6>
 628:	0f 92       	push	r0
 62a:	cd b7       	in	r28, 0x3d	; 61
 62c:	de b7       	in	r29, 0x3e	; 62
uint8 port_value=1;
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	89 83       	std	Y+1, r24	; 0x01


	while(1)
	{
	//
		for (col=0;col<KEYPAD_NUM_COL;col++)
 632:	1b 82       	std	Y+3, r1	; 0x03
 634:	53 c0       	rjmp	.+166    	; 0x6dc <KEYPAD_Pressed_Key+0xba>
		{
			MCAL_GPIO_setupPortDirection(KEYPAD_PORT,PORT_INPUT);
 636:	81 e0       	ldi	r24, 0x01	; 1
 638:	60 e0       	ldi	r22, 0x00	; 0
 63a:	0e 94 b1 01 	call	0x362	; 0x362 <MCAL_GPIO_setupPortDirection>
	//		DDRB=0x00;
			MCAL_GPIO_setupPinDirection(KEYPAD_PORT,(KEYPAD_COL_FIRST_PIN<<col),PIN_OUTPUT);
 63e:	8b 81       	ldd	r24, Y+3	; 0x03
 640:	28 2f       	mov	r18, r24
 642:	30 e0       	ldi	r19, 0x00	; 0
 644:	80 e1       	ldi	r24, 0x10	; 16
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	02 c0       	rjmp	.+4      	; 0x64e <KEYPAD_Pressed_Key+0x2c>
 64a:	88 0f       	add	r24, r24
 64c:	99 1f       	adc	r25, r25
 64e:	2a 95       	dec	r18
 650:	e2 f7       	brpl	.-8      	; 0x64a <KEYPAD_Pressed_Key+0x28>
 652:	98 2f       	mov	r25, r24
 654:	81 e0       	ldi	r24, 0x01	; 1
 656:	69 2f       	mov	r22, r25
 658:	41 e0       	ldi	r20, 0x01	; 1
 65a:	0e 94 36 00 	call	0x6c	; 0x6c <MCAL_GPIO_setupPinDirection>
		//	DDRB|=(KEYPAD_COL_FIRST_PIN<<col);
			port_value=(~(KEYPAD_COL_FIRST_PIN<<col));
 65e:	8b 81       	ldd	r24, Y+3	; 0x03
 660:	28 2f       	mov	r18, r24
 662:	30 e0       	ldi	r19, 0x00	; 0
 664:	80 e1       	ldi	r24, 0x10	; 16
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	02 c0       	rjmp	.+4      	; 0x66e <KEYPAD_Pressed_Key+0x4c>
 66a:	88 0f       	add	r24, r24
 66c:	99 1f       	adc	r25, r25
 66e:	2a 95       	dec	r18
 670:	e2 f7       	brpl	.-8      	; 0x66a <KEYPAD_Pressed_Key+0x48>
 672:	80 95       	com	r24
 674:	89 83       	std	Y+1, r24	; 0x01
			MCAL_GPIO_writePort(KEYPAD_PORT,port_value);
 676:	81 e0       	ldi	r24, 0x01	; 1
 678:	69 81       	ldd	r22, Y+1	; 0x01
 67a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <MCAL_GPIO_writePort>
			//PORTB=port_value;


			for(row=0;row<KEYPAD_NUM_ROW;row++)
 67e:	1a 82       	std	Y+2, r1	; 0x02
 680:	27 c0       	rjmp	.+78     	; 0x6d0 <KEYPAD_Pressed_Key+0xae>
				{
					if(MCAL_GPIO_readPin(KEYPAD_PORT,(KEYPAD_ROW_FIRST_PIN<<row))==GPIO_PIN_RESET)
 682:	8a 81       	ldd	r24, Y+2	; 0x02
 684:	28 2f       	mov	r18, r24
 686:	30 e0       	ldi	r19, 0x00	; 0
 688:	81 e0       	ldi	r24, 0x01	; 1
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	02 c0       	rjmp	.+4      	; 0x692 <KEYPAD_Pressed_Key+0x70>
 68e:	88 0f       	add	r24, r24
 690:	99 1f       	adc	r25, r25
 692:	2a 95       	dec	r18
 694:	e2 f7       	brpl	.-8      	; 0x68e <KEYPAD_Pressed_Key+0x6c>
 696:	98 2f       	mov	r25, r24
 698:	81 e0       	ldi	r24, 0x01	; 1
 69a:	69 2f       	mov	r22, r25
 69c:	0e 94 50 01 	call	0x2a0	; 0x2a0 <MCAL_GPIO_readPin>
 6a0:	88 23       	and	r24, r24
 6a2:	99 f4       	brne	.+38     	; 0x6ca <KEYPAD_Pressed_Key+0xa8>
						{
							#if (KEYPAD_NUM_COL == 3)
							return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COL)+col+1);
							#elif (KEYPAD_NUM_COL == 4)
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COL)+col+1);
 6a4:	8a 81       	ldd	r24, Y+2	; 0x02
 6a6:	88 2f       	mov	r24, r24
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	88 0f       	add	r24, r24
 6ac:	99 1f       	adc	r25, r25
 6ae:	88 0f       	add	r24, r24
 6b0:	99 1f       	adc	r25, r25
 6b2:	98 2f       	mov	r25, r24
 6b4:	8b 81       	ldd	r24, Y+3	; 0x03
 6b6:	89 0f       	add	r24, r25
 6b8:	8f 5f       	subi	r24, 0xFF	; 255
 6ba:	0e 94 73 03 	call	0x6e6	; 0x6e6 <KEYPAD_4x4_adjustKeyNumber>

						}
				}
		}
	}
}
 6be:	0f 90       	pop	r0
 6c0:	0f 90       	pop	r0
 6c2:	0f 90       	pop	r0
 6c4:	cf 91       	pop	r28
 6c6:	df 91       	pop	r29
 6c8:	08 95       	ret
			port_value=(~(KEYPAD_COL_FIRST_PIN<<col));
			MCAL_GPIO_writePort(KEYPAD_PORT,port_value);
			//PORTB=port_value;


			for(row=0;row<KEYPAD_NUM_ROW;row++)
 6ca:	8a 81       	ldd	r24, Y+2	; 0x02
 6cc:	8f 5f       	subi	r24, 0xFF	; 255
 6ce:	8a 83       	std	Y+2, r24	; 0x02
 6d0:	8a 81       	ldd	r24, Y+2	; 0x02
 6d2:	84 30       	cpi	r24, 0x04	; 4
 6d4:	b0 f2       	brcs	.-84     	; 0x682 <KEYPAD_Pressed_Key+0x60>


	while(1)
	{
	//
		for (col=0;col<KEYPAD_NUM_COL;col++)
 6d6:	8b 81       	ldd	r24, Y+3	; 0x03
 6d8:	8f 5f       	subi	r24, 0xFF	; 255
 6da:	8b 83       	std	Y+3, r24	; 0x03
 6dc:	8b 81       	ldd	r24, Y+3	; 0x03
 6de:	84 30       	cpi	r24, 0x04	; 4
 6e0:	08 f4       	brcc	.+2      	; 0x6e4 <KEYPAD_Pressed_Key+0xc2>
 6e2:	a9 cf       	rjmp	.-174    	; 0x636 <KEYPAD_Pressed_Key+0x14>
 6e4:	a6 cf       	rjmp	.-180    	; 0x632 <KEYPAD_Pressed_Key+0x10>

000006e6 <KEYPAD_4x4_adjustKeyNumber>:
}

#elif (KEYPAD_NUM_COL == 4)

static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
 6e6:	df 93       	push	r29
 6e8:	cf 93       	push	r28
 6ea:	00 d0       	rcall	.+0      	; 0x6ec <KEYPAD_4x4_adjustKeyNumber+0x6>
 6ec:	00 d0       	rcall	.+0      	; 0x6ee <KEYPAD_4x4_adjustKeyNumber+0x8>
 6ee:	cd b7       	in	r28, 0x3d	; 61
 6f0:	de b7       	in	r29, 0x3e	; 62
 6f2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_buttom;
		switch (button_number)
 6f4:	8a 81       	ldd	r24, Y+2	; 0x02
 6f6:	28 2f       	mov	r18, r24
 6f8:	30 e0       	ldi	r19, 0x00	; 0
 6fa:	3c 83       	std	Y+4, r19	; 0x04
 6fc:	2b 83       	std	Y+3, r18	; 0x03
 6fe:	8b 81       	ldd	r24, Y+3	; 0x03
 700:	9c 81       	ldd	r25, Y+4	; 0x04
 702:	88 30       	cpi	r24, 0x08	; 8
 704:	91 05       	cpc	r25, r1
 706:	09 f4       	brne	.+2      	; 0x70a <KEYPAD_4x4_adjustKeyNumber+0x24>
 708:	70 c0       	rjmp	.+224    	; 0x7ea <KEYPAD_4x4_adjustKeyNumber+0x104>
 70a:	2b 81       	ldd	r18, Y+3	; 0x03
 70c:	3c 81       	ldd	r19, Y+4	; 0x04
 70e:	29 30       	cpi	r18, 0x09	; 9
 710:	31 05       	cpc	r19, r1
 712:	5c f5       	brge	.+86     	; 0x76a <KEYPAD_4x4_adjustKeyNumber+0x84>
 714:	8b 81       	ldd	r24, Y+3	; 0x03
 716:	9c 81       	ldd	r25, Y+4	; 0x04
 718:	84 30       	cpi	r24, 0x04	; 4
 71a:	91 05       	cpc	r25, r1
 71c:	09 f4       	brne	.+2      	; 0x720 <KEYPAD_4x4_adjustKeyNumber+0x3a>
 71e:	59 c0       	rjmp	.+178    	; 0x7d2 <KEYPAD_4x4_adjustKeyNumber+0xec>
 720:	2b 81       	ldd	r18, Y+3	; 0x03
 722:	3c 81       	ldd	r19, Y+4	; 0x04
 724:	25 30       	cpi	r18, 0x05	; 5
 726:	31 05       	cpc	r19, r1
 728:	9c f4       	brge	.+38     	; 0x750 <KEYPAD_4x4_adjustKeyNumber+0x6a>
 72a:	8b 81       	ldd	r24, Y+3	; 0x03
 72c:	9c 81       	ldd	r25, Y+4	; 0x04
 72e:	82 30       	cpi	r24, 0x02	; 2
 730:	91 05       	cpc	r25, r1
 732:	09 f4       	brne	.+2      	; 0x736 <KEYPAD_4x4_adjustKeyNumber+0x50>
 734:	48 c0       	rjmp	.+144    	; 0x7c6 <KEYPAD_4x4_adjustKeyNumber+0xe0>
 736:	2b 81       	ldd	r18, Y+3	; 0x03
 738:	3c 81       	ldd	r19, Y+4	; 0x04
 73a:	23 30       	cpi	r18, 0x03	; 3
 73c:	31 05       	cpc	r19, r1
 73e:	0c f0       	brlt	.+2      	; 0x742 <KEYPAD_4x4_adjustKeyNumber+0x5c>
 740:	45 c0       	rjmp	.+138    	; 0x7cc <KEYPAD_4x4_adjustKeyNumber+0xe6>
 742:	8b 81       	ldd	r24, Y+3	; 0x03
 744:	9c 81       	ldd	r25, Y+4	; 0x04
 746:	81 30       	cpi	r24, 0x01	; 1
 748:	91 05       	cpc	r25, r1
 74a:	09 f4       	brne	.+2      	; 0x74e <KEYPAD_4x4_adjustKeyNumber+0x68>
 74c:	39 c0       	rjmp	.+114    	; 0x7c0 <KEYPAD_4x4_adjustKeyNumber+0xda>
 74e:	67 c0       	rjmp	.+206    	; 0x81e <KEYPAD_4x4_adjustKeyNumber+0x138>
 750:	2b 81       	ldd	r18, Y+3	; 0x03
 752:	3c 81       	ldd	r19, Y+4	; 0x04
 754:	26 30       	cpi	r18, 0x06	; 6
 756:	31 05       	cpc	r19, r1
 758:	09 f4       	brne	.+2      	; 0x75c <KEYPAD_4x4_adjustKeyNumber+0x76>
 75a:	41 c0       	rjmp	.+130    	; 0x7de <KEYPAD_4x4_adjustKeyNumber+0xf8>
 75c:	8b 81       	ldd	r24, Y+3	; 0x03
 75e:	9c 81       	ldd	r25, Y+4	; 0x04
 760:	87 30       	cpi	r24, 0x07	; 7
 762:	91 05       	cpc	r25, r1
 764:	0c f0       	brlt	.+2      	; 0x768 <KEYPAD_4x4_adjustKeyNumber+0x82>
 766:	3e c0       	rjmp	.+124    	; 0x7e4 <KEYPAD_4x4_adjustKeyNumber+0xfe>
 768:	37 c0       	rjmp	.+110    	; 0x7d8 <KEYPAD_4x4_adjustKeyNumber+0xf2>
 76a:	2b 81       	ldd	r18, Y+3	; 0x03
 76c:	3c 81       	ldd	r19, Y+4	; 0x04
 76e:	2c 30       	cpi	r18, 0x0C	; 12
 770:	31 05       	cpc	r19, r1
 772:	09 f4       	brne	.+2      	; 0x776 <KEYPAD_4x4_adjustKeyNumber+0x90>
 774:	46 c0       	rjmp	.+140    	; 0x802 <KEYPAD_4x4_adjustKeyNumber+0x11c>
 776:	8b 81       	ldd	r24, Y+3	; 0x03
 778:	9c 81       	ldd	r25, Y+4	; 0x04
 77a:	8d 30       	cpi	r24, 0x0D	; 13
 77c:	91 05       	cpc	r25, r1
 77e:	5c f4       	brge	.+22     	; 0x796 <KEYPAD_4x4_adjustKeyNumber+0xb0>
 780:	2b 81       	ldd	r18, Y+3	; 0x03
 782:	3c 81       	ldd	r19, Y+4	; 0x04
 784:	2a 30       	cpi	r18, 0x0A	; 10
 786:	31 05       	cpc	r19, r1
 788:	b1 f1       	breq	.+108    	; 0x7f6 <KEYPAD_4x4_adjustKeyNumber+0x110>
 78a:	8b 81       	ldd	r24, Y+3	; 0x03
 78c:	9c 81       	ldd	r25, Y+4	; 0x04
 78e:	8b 30       	cpi	r24, 0x0B	; 11
 790:	91 05       	cpc	r25, r1
 792:	a4 f5       	brge	.+104    	; 0x7fc <KEYPAD_4x4_adjustKeyNumber+0x116>
 794:	2d c0       	rjmp	.+90     	; 0x7f0 <KEYPAD_4x4_adjustKeyNumber+0x10a>
 796:	2b 81       	ldd	r18, Y+3	; 0x03
 798:	3c 81       	ldd	r19, Y+4	; 0x04
 79a:	2e 30       	cpi	r18, 0x0E	; 14
 79c:	31 05       	cpc	r19, r1
 79e:	b9 f1       	breq	.+110    	; 0x80e <KEYPAD_4x4_adjustKeyNumber+0x128>
 7a0:	8b 81       	ldd	r24, Y+3	; 0x03
 7a2:	9c 81       	ldd	r25, Y+4	; 0x04
 7a4:	8e 30       	cpi	r24, 0x0E	; 14
 7a6:	91 05       	cpc	r25, r1
 7a8:	7c f1       	brlt	.+94     	; 0x808 <KEYPAD_4x4_adjustKeyNumber+0x122>
 7aa:	2b 81       	ldd	r18, Y+3	; 0x03
 7ac:	3c 81       	ldd	r19, Y+4	; 0x04
 7ae:	2f 30       	cpi	r18, 0x0F	; 15
 7b0:	31 05       	cpc	r19, r1
 7b2:	79 f1       	breq	.+94     	; 0x812 <KEYPAD_4x4_adjustKeyNumber+0x12c>
 7b4:	8b 81       	ldd	r24, Y+3	; 0x03
 7b6:	9c 81       	ldd	r25, Y+4	; 0x04
 7b8:	80 31       	cpi	r24, 0x10	; 16
 7ba:	91 05       	cpc	r25, r1
 7bc:	69 f1       	breq	.+90     	; 0x818 <KEYPAD_4x4_adjustKeyNumber+0x132>
 7be:	2f c0       	rjmp	.+94     	; 0x81e <KEYPAD_4x4_adjustKeyNumber+0x138>
		{
		case 1:
			keypad_buttom=7;
 7c0:	87 e0       	ldi	r24, 0x07	; 7
 7c2:	89 83       	std	Y+1, r24	; 0x01
 7c4:	2e c0       	rjmp	.+92     	; 0x822 <KEYPAD_4x4_adjustKeyNumber+0x13c>
			break;
		case 2:
			keypad_buttom=8;
 7c6:	88 e0       	ldi	r24, 0x08	; 8
 7c8:	89 83       	std	Y+1, r24	; 0x01
 7ca:	2b c0       	rjmp	.+86     	; 0x822 <KEYPAD_4x4_adjustKeyNumber+0x13c>
			break;
		case 3:
			keypad_buttom=9;
 7cc:	89 e0       	ldi	r24, 0x09	; 9
 7ce:	89 83       	std	Y+1, r24	; 0x01
 7d0:	28 c0       	rjmp	.+80     	; 0x822 <KEYPAD_4x4_adjustKeyNumber+0x13c>
			break;
		case 4:
			keypad_buttom='%';
 7d2:	85 e2       	ldi	r24, 0x25	; 37
 7d4:	89 83       	std	Y+1, r24	; 0x01
 7d6:	25 c0       	rjmp	.+74     	; 0x822 <KEYPAD_4x4_adjustKeyNumber+0x13c>
			break;
		case 5:
			keypad_buttom=4;
 7d8:	84 e0       	ldi	r24, 0x04	; 4
 7da:	89 83       	std	Y+1, r24	; 0x01
 7dc:	22 c0       	rjmp	.+68     	; 0x822 <KEYPAD_4x4_adjustKeyNumber+0x13c>
			break;
		case 6:
			keypad_buttom=5;
 7de:	85 e0       	ldi	r24, 0x05	; 5
 7e0:	89 83       	std	Y+1, r24	; 0x01
 7e2:	1f c0       	rjmp	.+62     	; 0x822 <KEYPAD_4x4_adjustKeyNumber+0x13c>
			break;
		case 7:
			keypad_buttom=6;
 7e4:	86 e0       	ldi	r24, 0x06	; 6
 7e6:	89 83       	std	Y+1, r24	; 0x01
 7e8:	1c c0       	rjmp	.+56     	; 0x822 <KEYPAD_4x4_adjustKeyNumber+0x13c>
			break;
		case 8:
			keypad_buttom='*';
 7ea:	8a e2       	ldi	r24, 0x2A	; 42
 7ec:	89 83       	std	Y+1, r24	; 0x01
 7ee:	19 c0       	rjmp	.+50     	; 0x822 <KEYPAD_4x4_adjustKeyNumber+0x13c>
			break;
		case 9:
			keypad_buttom=1;
 7f0:	81 e0       	ldi	r24, 0x01	; 1
 7f2:	89 83       	std	Y+1, r24	; 0x01
 7f4:	16 c0       	rjmp	.+44     	; 0x822 <KEYPAD_4x4_adjustKeyNumber+0x13c>
			break;
		case 10:
			keypad_buttom=2;
 7f6:	82 e0       	ldi	r24, 0x02	; 2
 7f8:	89 83       	std	Y+1, r24	; 0x01
 7fa:	13 c0       	rjmp	.+38     	; 0x822 <KEYPAD_4x4_adjustKeyNumber+0x13c>
			break;
		case 11:
			keypad_buttom=3;
 7fc:	83 e0       	ldi	r24, 0x03	; 3
 7fe:	89 83       	std	Y+1, r24	; 0x01
 800:	10 c0       	rjmp	.+32     	; 0x822 <KEYPAD_4x4_adjustKeyNumber+0x13c>
			break;
		case 12:
			keypad_buttom='-';
 802:	8d e2       	ldi	r24, 0x2D	; 45
 804:	89 83       	std	Y+1, r24	; 0x01
 806:	0d c0       	rjmp	.+26     	; 0x822 <KEYPAD_4x4_adjustKeyNumber+0x13c>
			break;
		case 13:
			keypad_buttom='?';
 808:	8f e3       	ldi	r24, 0x3F	; 63
 80a:	89 83       	std	Y+1, r24	; 0x01
 80c:	0a c0       	rjmp	.+20     	; 0x822 <KEYPAD_4x4_adjustKeyNumber+0x13c>
			break;
		case 14:
			keypad_buttom=0;
 80e:	19 82       	std	Y+1, r1	; 0x01
 810:	08 c0       	rjmp	.+16     	; 0x822 <KEYPAD_4x4_adjustKeyNumber+0x13c>
			break;
		case 15:
			keypad_buttom='=';
 812:	8d e3       	ldi	r24, 0x3D	; 61
 814:	89 83       	std	Y+1, r24	; 0x01
 816:	05 c0       	rjmp	.+10     	; 0x822 <KEYPAD_4x4_adjustKeyNumber+0x13c>
			break;
		case 16:
			keypad_buttom='+';
 818:	8b e2       	ldi	r24, 0x2B	; 43
 81a:	89 83       	std	Y+1, r24	; 0x01
 81c:	02 c0       	rjmp	.+4      	; 0x822 <KEYPAD_4x4_adjustKeyNumber+0x13c>
			break;
		default :
			keypad_buttom=button_number;
 81e:	8a 81       	ldd	r24, Y+2	; 0x02
 820:	89 83       	std	Y+1, r24	; 0x01
		}
	return keypad_buttom;
 822:	89 81       	ldd	r24, Y+1	; 0x01

}
 824:	0f 90       	pop	r0
 826:	0f 90       	pop	r0
 828:	0f 90       	pop	r0
 82a:	0f 90       	pop	r0
 82c:	cf 91       	pop	r28
 82e:	df 91       	pop	r29
 830:	08 95       	ret

00000832 <main>:

#include "keypad.h"
#include "atmega32_gpio.h"

int main(void)
{
 832:	df 93       	push	r29
 834:	cf 93       	push	r28
 836:	0f 92       	push	r0
 838:	cd b7       	in	r28, 0x3d	; 61
 83a:	de b7       	in	r29, 0x3e	; 62
	uint8 key;

	/* Use a 7-segment to display the keypad button value */
	MCAL_GPIO_setupPinDirection(PORTC_ID,GPIO_PIN_0,PIN_OUTPUT);
 83c:	82 e0       	ldi	r24, 0x02	; 2
 83e:	61 e0       	ldi	r22, 0x01	; 1
 840:	41 e0       	ldi	r20, 0x01	; 1
 842:	0e 94 36 00 	call	0x6c	; 0x6c <MCAL_GPIO_setupPinDirection>
	MCAL_GPIO_setupPinDirection(PORTC_ID,GPIO_PIN_1,PIN_OUTPUT);
 846:	82 e0       	ldi	r24, 0x02	; 2
 848:	62 e0       	ldi	r22, 0x02	; 2
 84a:	41 e0       	ldi	r20, 0x01	; 1
 84c:	0e 94 36 00 	call	0x6c	; 0x6c <MCAL_GPIO_setupPinDirection>
	MCAL_GPIO_setupPinDirection(PORTC_ID,GPIO_PIN_2,PIN_OUTPUT);
 850:	82 e0       	ldi	r24, 0x02	; 2
 852:	64 e0       	ldi	r22, 0x04	; 4
 854:	41 e0       	ldi	r20, 0x01	; 1
 856:	0e 94 36 00 	call	0x6c	; 0x6c <MCAL_GPIO_setupPinDirection>
	MCAL_GPIO_setupPinDirection(PORTC_ID,GPIO_PIN_3,PIN_OUTPUT);
 85a:	82 e0       	ldi	r24, 0x02	; 2
 85c:	68 e0       	ldi	r22, 0x08	; 8
 85e:	41 e0       	ldi	r20, 0x01	; 1
 860:	0e 94 36 00 	call	0x6c	; 0x6c <MCAL_GPIO_setupPinDirection>

	while(1)
	{

		/* Get the pressed button from keypad */
		key = KEYPAD_Pressed_Key();
 864:	0e 94 11 03 	call	0x622	; 0x622 <KEYPAD_Pressed_Key>
 868:	89 83       	std	Y+1, r24	; 0x01
		if((key >= 0) && (key <= 9))
 86a:	89 81       	ldd	r24, Y+1	; 0x01
 86c:	8a 30       	cpi	r24, 0x0A	; 10
 86e:	d0 f7       	brcc	.-12     	; 0x864 <main+0x32>
		{
			MCAL_GPIO_writePort(PORTC_ID,key); /* display the key number on the 7-segment */
 870:	82 e0       	ldi	r24, 0x02	; 2
 872:	69 81       	ldd	r22, Y+1	; 0x01
 874:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <MCAL_GPIO_writePort>
 878:	f5 cf       	rjmp	.-22     	; 0x864 <main+0x32>

0000087a <_exit>:
 87a:	f8 94       	cli

0000087c <__stop_program>:
 87c:	ff cf       	rjmp	.-2      	; 0x87c <__stop_program>
