
MCU_FUND_lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001a4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002d4  080002d4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002d4  080002d4  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080002d4  080002d4  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002d4  080002d4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002d4  080002d4  000102d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080002d8  080002d8  000102d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080002dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  080002e0  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080002e0  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000246  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000000ea  00000000  00000000  00020273  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000050  00000000  00000000  00020360  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000038  00000000  00000000  000203b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000ae5  00000000  00000000  000203e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000001d7  00000000  00000000  00020ecd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00002f03  00000000  00000000  000210a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00023fa7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000007c  00000000  00000000  00024024  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	080002bc 	.word	0x080002bc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	080002bc 	.word	0x080002bc

08000170 <clock_init>:
}R_ODR;

volatile R_ODR *ODR =  ((volatile R_ODR*)(GPIOA_BASE+0x0c));

void clock_init()
{   //Reset value for RCC_CFGR
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	RCC_CFGR = 0x00000000;
 8000174:	4b09      	ldr	r3, [pc, #36]	; (800019c <clock_init+0x2c>)
 8000176:	2200      	movs	r2, #0
 8000178:	601a      	str	r2, [r3, #0]
	0xx: HCLK not divided
	100: HCLK divided by 2
	101: HCLK divided by 4
	110: HCLK divided by 8
	111: HCLK divided by 16*/
	RCC_CFGR|= (1<<10);
 800017a:	4b08      	ldr	r3, [pc, #32]	; (800019c <clock_init+0x2c>)
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	4a07      	ldr	r2, [pc, #28]	; (800019c <clock_init+0x2c>)
 8000180:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000184:	6013      	str	r3, [r2, #0]
	0xx: HCLK not divided
	100: HCLK divided by 2
	101: HCLK divided by 4
	110: HCLK divided by 8
	111: HCLK divided by 16 */
	RCC_CFGR|=(0b101<<11);
 8000186:	4b05      	ldr	r3, [pc, #20]	; (800019c <clock_init+0x2c>)
 8000188:	681b      	ldr	r3, [r3, #0]
 800018a:	4a04      	ldr	r2, [pc, #16]	; (800019c <clock_init+0x2c>)
 800018c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8000190:	6013      	str	r3, [r2, #0]



}
 8000192:	bf00      	nop
 8000194:	46bd      	mov	sp, r7
 8000196:	bc80      	pop	{r7}
 8000198:	4770      	bx	lr
 800019a:	bf00      	nop
 800019c:	40021004 	.word	0x40021004

080001a0 <main>:

int main(void) {
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
	clock_init();
 80001a6:	f7ff ffe3 	bl	8000170 <clock_init>
	//init clock for port A
	RCC_APB2ENR |= 1 << 2;
 80001aa:	4b1a      	ldr	r3, [pc, #104]	; (8000214 <main+0x74>)
 80001ac:	681b      	ldr	r3, [r3, #0]
 80001ae:	4a19      	ldr	r2, [pc, #100]	; (8000214 <main+0x74>)
 80001b0:	f043 0304 	orr.w	r3, r3, #4
 80001b4:	6013      	str	r3, [r2, #0]
	//port A init
	GPIOA_CRH &= 0xff0fffff;
 80001b6:	4b18      	ldr	r3, [pc, #96]	; (8000218 <main+0x78>)
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	4a17      	ldr	r2, [pc, #92]	; (8000218 <main+0x78>)
 80001bc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80001c0:	6013      	str	r3, [r2, #0]
	GPIOA_CRH |= 0x00200000;
 80001c2:	4b15      	ldr	r3, [pc, #84]	; (8000218 <main+0x78>)
 80001c4:	681b      	ldr	r3, [r3, #0]
 80001c6:	4a14      	ldr	r2, [pc, #80]	; (8000218 <main+0x78>)
 80001c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80001cc:	6013      	str	r3, [r2, #0]
	int i;
	while (1)
	{

		ODR->pins.pin13=1;
 80001ce:	4b13      	ldr	r3, [pc, #76]	; (800021c <main+0x7c>)
 80001d0:	681a      	ldr	r2, [r3, #0]
 80001d2:	6813      	ldr	r3, [r2, #0]
 80001d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80001d8:	6013      	str	r3, [r2, #0]
		for (i = 0; i < 5000; i++);
 80001da:	2300      	movs	r3, #0
 80001dc:	607b      	str	r3, [r7, #4]
 80001de:	e002      	b.n	80001e6 <main+0x46>
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	3301      	adds	r3, #1
 80001e4:	607b      	str	r3, [r7, #4]
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	f241 3287 	movw	r2, #4999	; 0x1387
 80001ec:	4293      	cmp	r3, r2
 80001ee:	ddf7      	ble.n	80001e0 <main+0x40>
		ODR->pins.pin13=0;
 80001f0:	4b0a      	ldr	r3, [pc, #40]	; (800021c <main+0x7c>)
 80001f2:	681a      	ldr	r2, [r3, #0]
 80001f4:	6813      	ldr	r3, [r2, #0]
 80001f6:	f36f 334d 	bfc	r3, #13, #1
 80001fa:	6013      	str	r3, [r2, #0]
		for (i = 0; i < 5000; i++);
 80001fc:	2300      	movs	r3, #0
 80001fe:	607b      	str	r3, [r7, #4]
 8000200:	e002      	b.n	8000208 <main+0x68>
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	3301      	adds	r3, #1
 8000206:	607b      	str	r3, [r7, #4]
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	f241 3287 	movw	r2, #4999	; 0x1387
 800020e:	4293      	cmp	r3, r2
 8000210:	ddf7      	ble.n	8000202 <main+0x62>
		ODR->pins.pin13=1;
 8000212:	e7dc      	b.n	80001ce <main+0x2e>
 8000214:	40021018 	.word	0x40021018
 8000218:	40010804 	.word	0x40010804
 800021c:	20000000 	.word	0x20000000

08000220 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000220:	480d      	ldr	r0, [pc, #52]	; (8000258 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000222:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000224:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000228:	480c      	ldr	r0, [pc, #48]	; (800025c <LoopForever+0x6>)
  ldr r1, =_edata
 800022a:	490d      	ldr	r1, [pc, #52]	; (8000260 <LoopForever+0xa>)
  ldr r2, =_sidata
 800022c:	4a0d      	ldr	r2, [pc, #52]	; (8000264 <LoopForever+0xe>)
  movs r3, #0
 800022e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000230:	e002      	b.n	8000238 <LoopCopyDataInit>

08000232 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000232:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000234:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000236:	3304      	adds	r3, #4

08000238 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000238:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800023a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800023c:	d3f9      	bcc.n	8000232 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800023e:	4a0a      	ldr	r2, [pc, #40]	; (8000268 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000240:	4c0a      	ldr	r4, [pc, #40]	; (800026c <LoopForever+0x16>)
  movs r3, #0
 8000242:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000244:	e001      	b.n	800024a <LoopFillZerobss>

08000246 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000246:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000248:	3204      	adds	r2, #4

0800024a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800024a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800024c:	d3fb      	bcc.n	8000246 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800024e:	f000 f811 	bl	8000274 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000252:	f7ff ffa5 	bl	80001a0 <main>

08000256 <LoopForever>:

LoopForever:
    b LoopForever
 8000256:	e7fe      	b.n	8000256 <LoopForever>
  ldr   r0, =_estack
 8000258:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800025c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000260:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000264:	080002dc 	.word	0x080002dc
  ldr r2, =_sbss
 8000268:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800026c:	20000020 	.word	0x20000020

08000270 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000270:	e7fe      	b.n	8000270 <ADC1_2_IRQHandler>
	...

08000274 <__libc_init_array>:
 8000274:	b570      	push	{r4, r5, r6, lr}
 8000276:	2500      	movs	r5, #0
 8000278:	4e0c      	ldr	r6, [pc, #48]	; (80002ac <__libc_init_array+0x38>)
 800027a:	4c0d      	ldr	r4, [pc, #52]	; (80002b0 <__libc_init_array+0x3c>)
 800027c:	1ba4      	subs	r4, r4, r6
 800027e:	10a4      	asrs	r4, r4, #2
 8000280:	42a5      	cmp	r5, r4
 8000282:	d109      	bne.n	8000298 <__libc_init_array+0x24>
 8000284:	f000 f81a 	bl	80002bc <_init>
 8000288:	2500      	movs	r5, #0
 800028a:	4e0a      	ldr	r6, [pc, #40]	; (80002b4 <__libc_init_array+0x40>)
 800028c:	4c0a      	ldr	r4, [pc, #40]	; (80002b8 <__libc_init_array+0x44>)
 800028e:	1ba4      	subs	r4, r4, r6
 8000290:	10a4      	asrs	r4, r4, #2
 8000292:	42a5      	cmp	r5, r4
 8000294:	d105      	bne.n	80002a2 <__libc_init_array+0x2e>
 8000296:	bd70      	pop	{r4, r5, r6, pc}
 8000298:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800029c:	4798      	blx	r3
 800029e:	3501      	adds	r5, #1
 80002a0:	e7ee      	b.n	8000280 <__libc_init_array+0xc>
 80002a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002a6:	4798      	blx	r3
 80002a8:	3501      	adds	r5, #1
 80002aa:	e7f2      	b.n	8000292 <__libc_init_array+0x1e>
 80002ac:	080002d4 	.word	0x080002d4
 80002b0:	080002d4 	.word	0x080002d4
 80002b4:	080002d4 	.word	0x080002d4
 80002b8:	080002d8 	.word	0x080002d8

080002bc <_init>:
 80002bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002be:	bf00      	nop
 80002c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002c2:	bc08      	pop	{r3}
 80002c4:	469e      	mov	lr, r3
 80002c6:	4770      	bx	lr

080002c8 <_fini>:
 80002c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ca:	bf00      	nop
 80002cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002ce:	bc08      	pop	{r3}
 80002d0:	469e      	mov	lr, r3
 80002d2:	4770      	bx	lr
