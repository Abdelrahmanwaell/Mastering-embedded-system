/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

#include "Platform_Type.h"
#define RCC_BASE           0x40021000
#define GPIOA_BASE 		   0x40010800
#define RCC_APB2ENR        *(vuint32*)(RCC_BASE+0x18)
#define GPIOA_CRH          *((vuint32*)(GPIOA_BASE+0x04))
#define GPIOA_ODR          *((vuint32*)(GPIOA_BASE+0x0c))
#define RCC_CFGR		   *((vuint32*)(RCC_BASE+0x04))
#define RCC_CR		  	   *((vuint32*)(RCC_BASE+0x00))


typedef union {
	vuint32 All_fields;
	struct {
		vuint32 reserved:13;
		vuint32 pin13:1;
		vuint32 pin14:1;
		vuint32 pin15:1;
		vuint32 pin16:1;
		vuint32 pin17:1;
		vuint32 pin18:1;
		vuint32 pin19:1;
		vuint32 pin20:1;
		vuint32 pin21:1;
		vuint32 pin22:1;
		vuint32 pin23:1;
		vuint32 pin24:1;
		vuint32 pin25:1;
		vuint32 pin26:1;
		vuint32 pin27:1;
		vuint32 pin28:1;
		vuint32 pin29:1;
		vuint32 pin30:1;
		vuint32 pin31:1;
	}pins;

}R_ODR;

volatile R_ODR *ODR =  ((volatile R_ODR*)(GPIOA_BASE+0x0c));

void clock_init()
{   	RCC_CFGR &=~(1<<16);
RCC_CFGR|=((0b0110)<<18);
RCC_CFGR|=2;
RCC_CR|=(1<<24);

}

int main(void) {
	clock_init();
	//init clock for port A
	RCC_APB2ENR |= 1 << 2;
	//port A init
	GPIOA_CRH &= 0xff0fffff;
	GPIOA_CRH |= 0x00200000;
	int i;
	while (1)
	{

		ODR->pins.pin13=1;
		for (i = 0; i < 5000; i++);
		ODR->pins.pin13=0;
		for (i = 0; i < 5000; i++);
	}

	return 0;
}
